name: Production CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Stage 1: Fast checks (lint, type, unit tests)
  fast-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pytest pytest-cov
          
      - name: Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Format check with black
        run: black --check src/
        
      - name: Import sort check with isort
        run: isort --check-only src/
        
      - name: Type check with mypy
        run: mypy src/ --ignore-missing-imports
        
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
          
      - name: Run notebooks CI
        run: |
          bash scripts/run_notebooks_ci.sh
          
      - name: Check logs for secrets
        run: |
          bash scripts/check_logs_secrets.sh
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Stage 2: Contract tests (offline fixtures)
  contract-tests:
    runs-on: ubuntu-latest
    needs: fast-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run contract tests
        run: |
          pytest tests/contract/ -v --tb=short
        env:
          NOCTURNAL_BASE: "http://localhost:8000"
          NOCTURNAL_KEY: "test-key-123"

  # Stage 3: Docker build and selftest
  docker-selftest:
    runs-on: ubuntu-latest
    needs: contract-tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          docker build -t nocturnal-archive-api:test .
          
      - name: Start services
        run: |
          docker-compose -f deploy/docker-compose.yml up -d redis redisq
          sleep 10
          
      - name: Run application
        run: |
          docker run -d --name api-test \
            --network host \
            -e ADMIN_KEY="test-admin-key" \
            -e OPENAI_API_KEY="sk-test-key" \
            -e REDIS_URL="redis://localhost:6379/0" \
            nocturnal-archive-api:test
          sleep 15
          
      - name: Run selftest
        run: |
          curl -f http://localhost:8000/livez
          curl -f -H "X-Admin-Key: test-admin-key" http://localhost:8000/v1/diag/selftest?live=false
          
      - name: Cleanup
        if: always()
        run: |
          docker stop api-test || true
          docker rm api-test || true
          docker-compose -f deploy/docker-compose.yml down || true

  # Stage 4: Load testing (non-blocking)
  load-test:
    runs-on: ubuntu-latest
    needs: docker-selftest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust
          
      - name: Start services
        run: |
          docker-compose -f deploy/docker-compose.yml up -d
          sleep 30
          
      - name: Run load test
        run: |
          locust -f tests/performance/locustfile.py \
            --host http://localhost:8000 \
            --users 10 \
            --spawn-rate 2 \
            --run-time 30s \
            --headless \
            --html load_test_report.html
        env:
          API_KEY: "demo-key-123"
          
      - name: Upload load test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-report
          path: load_test_report.html

  # Stage 5: Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: fast-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt
          
      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Stage 6: Deploy to staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-selftest, load-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f deploy/docker-compose.staging.yml up -d
          
      - name: Run smoke tests
        run: |
          sleep 30
          ./scripts/validate_production.sh
        env:
          API_BASE: "https://staging-api.nocturnal.dev"
          
      - name: Notify deployment
        if: always()
        run: |
          echo "Staging deployment completed"

  # Stage 7: Deploy to production (manual approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f deploy/docker-compose.prod.yml up -d
          
      - name: Run production validation
        run: |
          sleep 60
          ./scripts/red_team_smoke.sh
        env:
          API_BASE: "https://api.nocturnal.dev"
          
      - name: Notify deployment
        if: always()
        run: |
          echo "Production deployment completed"
